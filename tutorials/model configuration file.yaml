Path:
  WD:       <working directory>
  Modules:  <directory to the folder containing ABM modules>

WaterSystem:
  StartDate:    <simulation start date, e.g., 1981/1/1>
  EndDate:      <simulation end date, e.g., 2013/12/31>
  DataLength:   <total simulation length/days, e.g., 12053>
  NumSubbasins: <number of subbasins>
  Outlets:      <a list of subbasins'/outlets' names, e.g., ["outlet1", "outlet2"]>
  NodeGroups:   <a list of node group lists, e.g., [["outlet1", "outlet2"], []]>
  LSM:          <selected rainfall-runoff models, e.g., 'GWLF' or 'ABCD' or 'Other'>
  Routing:      <selected routing model, e.g., 'Lohmann'>
  ABM:
    Modules:    <a list of ABM modules, e.g., ['TRB_ABM_Instit.py']>
    InstitDMClasses:
        <a dict of {InstitDMClass: a list of institutional decision-making objects}>
    DMClasses:      <a list of decision-making classes, e.g., ['ReleaseDM', 'TransferDM']>
    DamAPI:         <a list of agent type classes using DamAPI, e.g., ['Reservoir_AgtType']>
    RiverDivAPI:    <a list of agent type classes using RiverDivAPI, e.g., ['Diversion_AgtType']>
    InsituAPI:      <a list of agent type classes using InsituAPI, e.g., ['Drain_AgtType']>
    ConveyingAPI:   <a list of agent type classes using ConveyingAPI, e.g., ['Pipe_AgtType']>
    Institutions:
        <a dict of {an institutional decision-making agent: a list of agent members}>

RainfallRunoff:
  <an outlet name, e.g., 'outlet1'>:
    Inputs: <input dict for selected rainfall-runoff model at outlet1>
    Pars:   <parameter dict for selected rainfall-runoff model at outlet1>
  <an outlet name, e.g., 'outlet2'>:
    Inputs: <input dict for selected rainfall-runoff model at outlet2>
    Pars:   <parameter dict for selected rainfall-runoff model at outlet2>

Routing:
  <a routing outlet name, e.g., 'outlet1'>:
    <an upstream outlet name, e.g., 'outlet1'>:
      Inputs:   <input dict of Lohmann routing model for link between outlet1 and the routing outlet>
      Pars:     <parameter dict of Lohmann routing model for link between outlet1 and the routing outlet>
    <an upstream outlet name, e.g., 'outlet2'>:
      Inputs:   <input dict of Lohmann routing model for link between outlet2 and the routing outlet>
      Pars:     <parameter dict of Lohmann routing model for link between outlet2 and the routing outlet>

ABM:
  <an agent type class name, e.g., 'Reservoir_AgtType'>:
    <an agent name belongs to this class, e.g., 'ResAgt'>:
      Attributes: "agent's attributes dict, e.g., {}"
      Inputs:
        Priority:   <exercution piority is conflict occurs, e.g., 0>
        Links:      "<linkage dict, e.g., divert from 'outlet1' and return to 'outlet2,' {'outlet1': -1, 'outlet2': 1}>"
        DMClass:    <assigned decision-making class or institution or none, e.g., 'ReleaseDM'>
      Pars:     <parameter dict of the agent, e.g., {}>
